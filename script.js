// ‚ö° ‡πÉ‡∏™‡πà IP ‡∏Ç‡∏≠‡∏á ESP32 ‡∏ó‡∏µ‡πà Serial Monitor ‡πÅ‡∏™‡∏î‡∏á
const wss = new WebSocket("ws://172.20.10.12:81"); 

// ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
if ('Notification' in window) {
  if (Notification.permission === 'default') {
    Notification.requestPermission().then(permission => {
      console.log('Notification permission:', permission);
    });
  }
}

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
let previousFullStatus = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function sendNotification(title, message, icon = 'üöó') {
  if ('Notification' in window && Notification.permission === 'granted') {
    new Notification(title, {
      body: message,
      icon: 'data:image/svg+xml;base64,' + btoa(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">${icon}</text></svg>`),
      badge: 'data:image/svg+xml;base64,' + btoa(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">üöó</text></svg>`),
      tag: 'parking-notification',
      requireInteraction: true
    });
  }
}

wss.onopen = () => {
  console.log("Connected to ESP32");
  document.getElementById("status").textContent = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
};

wss.onerror = (error) => {
  console.error("WebSocket Error:", error);
  document.getElementById("status").textContent = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö";
};

wss.onclose = () => {
  console.warn("WebSocket Closed");
  document.getElementById("status").textContent = "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î";
};

wss.onmessage = (event) => {
  console.log("Data from ESP32:", event.data);
  const data = JSON.parse(event.data);

  // Update parking spots display with enhanced animations
  const container = document.getElementById("spots");
  const existingSpots = container.querySelectorAll('.parking-spot');
  
  let totalSpots = 5;
  let occupiedSpots = 0;

  // If first time loading, create spots with staggered animation
  if (existingSpots.length === 0) {
    container.innerHTML = "";
    
    for (let i = 1; i <= totalSpots; i++) {
      const div = document.createElement("div");
      const isOccupied = data["spot"+i];
      
      div.className = "parking-spot";
      div.style.opacity = '0';
      div.style.transform = 'translateY(20px) scale(0.8)';
      div.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
      
      if (isOccupied) {
        occupiedSpots++;
        div.classList.add('occupied');
        div.innerHTML = `
          <div class="spot-header">
            <span class="spot-number">${i}</span>
            <div class="car-icon">üöó</div>
          </div>
          <div class="spot-status-container">
            <span class="spot-status occupied">‡πÄ‡∏ï‡πá‡∏°</span>
            <div class="pulse-indicator occupied"></div>
          </div>
          <div class="spot-details">
            <small>‡∏°‡∏µ‡∏£‡∏ñ‡∏à‡∏≠‡∏î</small>
          </div>
        `;
      } else {
        div.classList.add('available');
        div.innerHTML = `
          <div class="spot-header">
            <span class="spot-number">${i}</span>
            <div class="parking-icon">üÖøÔ∏è</div>
          </div>
          <div class="spot-status-container">
            <span class="spot-status available">‡∏ß‡πà‡∏≤‡∏á</span>
            <div class="pulse-indicator available"></div>
          </div>
          <div class="spot-details">
            <small>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</small>
          </div>
        `;
      }
      
      container.appendChild(div);
      
      // Staggered animation
      setTimeout(() => {
        div.style.opacity = '1';
        div.style.transform = 'translateY(0) scale(1)';
      }, i * 150);
    }
  } else {
    // Update existing spots with smooth transitions
    for (let i = 1; i <= totalSpots; i++) {
      const spot = existingSpots[i-1];
      const isOccupied = data["spot"+i];
      const wasOccupied = spot.classList.contains('occupied');
      
      if (isOccupied) occupiedSpots++;
      
      // Only update if status changed
      if (isOccupied !== wasOccupied) {
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÄ‡∏ï‡πá‡∏°
        if (isOccupied && !wasOccupied) {
          sendNotification(
            'üöó ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÄ‡∏ï‡πá‡∏°!',
            `‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ó‡∏µ‡πà ${i} ‡∏°‡∏µ‡∏£‡∏ñ‡∏à‡∏≠‡∏î‡πÅ‡∏•‡πâ‡∏ß`,
            'üöó'
          );
        }
        
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏á
        if (!isOccupied && wasOccupied) {
          sendNotification(
            '‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏á!',
            `‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ó‡∏µ‡πà ${i} ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
            '‚úÖ'
          );
        }
        
        // Add change animation
        spot.style.transform = 'scale(1.1)';
        spot.style.transition = 'all 0.3s ease';
        
        setTimeout(() => {
          spot.className = `parking-spot ${isOccupied ? 'occupied' : 'available'}`;
          
          if (isOccupied) {
            spot.innerHTML = `
              <div class="spot-header">
                <span class="spot-number">${i}</span>
                <div class="car-icon">üöó</div>
              </div>
              <div class="spot-status-container">
                <span class="spot-status occupied">‡πÄ‡∏ï‡πá‡∏°</span>
                <div class="pulse-indicator occupied"></div>
              </div>
              <div class="spot-details">
                <small>‡∏°‡∏µ‡∏£‡∏ñ‡∏à‡∏≠‡∏î</small>
              </div>
            `;
          } else {
            spot.innerHTML = `
              <div class="spot-header">
                <span class="spot-number">${i}</span>
                <div class="parking-icon">üÖøÔ∏è</div>
              </div>
              <div class="spot-status-container">
                <span class="spot-status available">‡∏ß‡πà‡∏≤‡∏á</span>
                <div class="pulse-indicator available"></div>
              </div>
              <div class="spot-details">
                <small>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</small>
              </div>
            `;
          }
          
          spot.style.transform = 'scale(1)';
        }, 150);
      }
    }
  }

  // Update stats
  document.getElementById("totalSpots").textContent = totalSpots;
  document.getElementById("freeSpots").textContent = totalSpots - occupiedSpots;
  document.getElementById("occupiedSpots").textContent = occupiedSpots;
  
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
  const isCurrentlyFull = occupiedSpots === totalSpots;
  if (isCurrentlyFull && !previousFullStatus) {
    sendNotification(
      'üö´ ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!',
      '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏≠‡∏∑‡πà‡∏ô',
      'üö´'
    );
  }
  
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ï‡πá‡∏°
  if (!isCurrentlyFull && previousFullStatus) {
    sendNotification(
      'üéâ ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß!',
      `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î‡∏ß‡πà‡∏≤‡∏á ${totalSpots - occupiedSpots} ‡∏ä‡πà‡∏≠‡∏á`,
      'üéâ'
    );
  }
  
  previousFullStatus = isCurrentlyFull;
  

};

// Fallback: Show demo data if WebSocket fails
setTimeout(() => {
  if (ws.readyState !== WebSocket.OPEN) {
    console.log("üîÑ Using demo data...");
    
    const demoData = {
      "spot1": false,
      "spot2": true,
      "spot3": false,
      "spot4": true,
      "spot5": false
    };
   
    // Simulate receiving data
    const event = { data: JSON.stringify(demoData) };
    ws.onmessage(event);
    
    document.getElementById("status").textContent = "üîÑ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32)";
  }
}, 3000);

// Page transition control
window.addEventListener('load', function() {
  const transition = document.getElementById('pageTransition');
  setTimeout(() => {
    transition.classList.add('fade-out');
  }, 100);
});

// Handle navigation with smooth transition
document.addEventListener('DOMContentLoaded', function() {
  const homeLink = document.querySelector('a[href="index.html"]');
  if (homeLink) {
    homeLink.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Add fade out effect to current content
      const mainContainer = document.querySelector('.main-container');
      const navbar = document.querySelector('.navbar');
      
      mainContainer.style.transition = 'all 0.8s ease-out';
      navbar.style.transition = 'all 0.8s ease-out';
      
      mainContainer.style.opacity = '0';
      mainContainer.style.transform = 'translateY(-20px) scale(0.98)';
      navbar.style.opacity = '0';
      navbar.style.transform = 'translateY(-10px)';
      
      // Show transition overlay
      const transition = document.getElementById('pageTransition');
      transition.classList.remove('fade-out');
      transition.style.opacity = '1';
      transition.style.background = '#000000';
      
      setTimeout(() => {
        window.location.href = 'index.html';
      }, 800);
    });
  }
});
